{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","Algorithms/dijkstra.js","Algorithms/astar.js","Algorithms/BFS.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Heap","require","astar","gDistance","a","b","hDistance","manhattanDistance","console","log","size","heapify","pop","one","two","colOne","rowOne","colTwo","rowTwo","Math","abs","isValid","x","y","height","window","innerHeight","width","innerWidth","maxRow","maxCol","START_NODE_ROW","floor","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","mouseIsPressed","GetInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","name","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","NodesInShortestPathOrderOfAstar","getNodesInShortestPathOrderOfAstar","dx","dy","queue","j","newX","newY","bfs","NodesInShortestPathOrderOfBFS","getNodesInShortestPathOrderOfBFS","onClick","visualize","class","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6d64ac98.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n\r\n    // determine what calss to apply\r\n\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    // mouse action handler\r\n    return (\r\n      <td\r\n        // could be done by react ref\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></td>\r\n      //{`${row} ${col}`}\r\n    );\r\n  }\r\n}\r\n","// Dijkstra's algorithm\r\n// return all nodes in the order of visited.\r\n// Make nodes point back to their previous node, which allows us to get the shortest path by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    // \"!!\" converts Object to boolean.\r\n    sortNodesByDistance(unvisitedNodes); //could implement minheap heap for better porformance\r\n    const closestNode = unvisitedNodes.shift();\r\n    // handle walls\r\n    if (closestNode.isWall) continue;\r\n    // handle conorcase: trapped inside the wall\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// A-star's algorithm\r\n// return all nodes in the order of visited.\r\n// Make nodes point back to their previous node, which allows us to get the shortest path by backtracking from the finish node.\r\nvar Heap = require(\"heap\");\r\n\r\nexport function astar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  const visitedNodesInOrder = [];\r\n  startNode.gDistance = 0;\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid, finishNode);\r\n\r\n  unvisitedNodes.push(startNode);\r\n  console.log(unvisitedNodes);\r\n  while (!!unvisitedNodes.size()) {\r\n    // \"!!\" converts Object to boolean.\r\n    //sortNodesByDistance(unvisitedNodes); //could implement minheap heap for better porformance\r\n    unvisitedNodes.heapify();\r\n    const closestNode = unvisitedNodes.pop();\r\n    // console.log(unvisitedNodes);\r\n    // handle walls\r\n    if (closestNode.isWall) continue;\r\n    // handle conorcase: trapped inside the wall\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateUnvisitedNeighbors(closestNode, grid, unvisitedNodes);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.gDistance = node.gDistance + 1;\r\n    neighbor.distance = neighbor.hDistance + neighbor.gDistance;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid, finishNode) {\r\n  var nodes = new Heap(function (a, b) {\r\n    return a.distance - b.distance;\r\n  });\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.hDistance = manhattanDistance(node, finishNode);\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction manhattanDistance(one, two) {\r\n  let colOne = one.col;\r\n  let rowOne = one.row;\r\n  let colTwo = two.col;\r\n  let rowTwo = two.row;\r\n  let deltaCol = Math.abs(colOne - colTwo);\r\n  let deltaRow = Math.abs(rowOne - rowTwo);\r\n  return (deltaCol + deltaRow) * 2;\r\n}\r\n\r\n// function euclideanDistance(one, two) {\r\n//   let colOne = one.col;\r\n//   let rowOne = one.row;\r\n//   let colTwo = two.col;\r\n//   let rowTwo = two.row;\r\n//   let deltaCol = Math.abs(colOne - colTwo);\r\n//   let deltaRow = Math.abs(rowOne - rowTwo);\r\n//   return Math.sqrt(deltaCol * deltaCol + deltaRow * deltaRow);\r\n// }\r\n\r\nexport function getNodesInShortestPathOrderOfAstar(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// BFS's algorithm\r\n// return all nodes in the order of visited.\r\n// Make nodes point back to their previous node, which allows us to get the shortest path by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const dx = [0, 0, 1, -1];\r\n  const dy = [1, -1, 0, 0];\r\n  startNode.distance = 0;\r\n  const queue = [];\r\n  grid[startNode.row][startNode.col].distance = 0;\r\n  grid[startNode.row][startNode.col].isVisited = true;\r\n  queue.push(grid[startNode.row][startNode.col]);\r\n  //const unvisitedNodes = getAllNodes(grid);\r\n  while (queue.length !== 0) {\r\n    let size = queue.length;\r\n\r\n    // console.log(size + \" \" + queue.length);\r\n    for (var i = 0; i < size; i++) {\r\n      // console.log(queue.length + \" i:\" + i);\r\n\r\n      let closestNode = queue.shift();\r\n      console.log(closestNode.row * grid.length + closestNode.col);\r\n      // handle walls\r\n      if (closestNode.isWall) continue;\r\n      // handle conorcase: trapped inside the wall\r\n      visitedNodesInOrder.push(closestNode);\r\n\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      if (closestNode === finishNode) {\r\n        return visitedNodesInOrder;\r\n      }\r\n\r\n      for (var j = 0; j < 4; j++) {\r\n        const { row, col } = closestNode;\r\n        const newX = row + dx[j];\r\n        const newY = col + dy[j];\r\n\r\n        if (isValid(newX, newY, grid) && !grid[newX][newY].isVisited) {\r\n          grid[newX][newY].distance = 1;\r\n          grid[newX][newY].previousNode = closestNode;\r\n          console.log(grid[newX][newY].isVisited);\r\n          grid[newX][newY].isVisited = true;\r\n          queue.push(grid[newX][newY]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isValid(x, y, grid) {\r\n  return x < grid.length && x >= 0 && y < grid[0].length && y >= 0;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderOfBFS(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../Algorithms/dijkstra\";\r\nimport { astar, getNodesInShortestPathOrderOfAstar } from \"../Algorithms/astar\";\r\nimport { bfs, getNodesInShortestPathOrderOfBFS } from \"../Algorithms/BFS\";\r\n// import useWindowDimensions from \"../components/useWindowDimensions\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport \"./Node/Node.css\";\r\n\r\nconst height = window.innerHeight;\r\nconst width = window.innerWidth;\r\nconst maxRow = height / 40;\r\nconst maxCol = width / 30;\r\nconst START_NODE_ROW = Math.floor(maxRow * 0.5);\r\nconst START_NODE_COL = Math.floor(maxCol * 0.25);\r\nconst FINISH_NODE_ROW = Math.floor(maxRow * 0.5);\r\nconst FINISH_NODE_COL = Math.floor(maxCol * 0.75);\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = GetInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualize(name) {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    if (name === \"Dijkstra\") {\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n    if (name === \"astar\") {\r\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n      const NodesInShortestPathOrderOfAstar = getNodesInShortestPathOrderOfAstar(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(\r\n        visitedNodesInOrder,\r\n        NodesInShortestPathOrderOfAstar\r\n      );\r\n    }\r\n    if (name === \"bfs\") {\r\n      const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n      const NodesInShortestPathOrderOfBFS = getNodesInShortestPathOrderOfBFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, NodesInShortestPathOrderOfBFS);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <header>\r\n          <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n              <h1 className=\"title\">Pathfinding Visualizer</h1>\r\n              <div className=\"operation-panel\">\r\n                <button\r\n                  onClick={() => this.visualize(\"Dijkstra\")}\r\n                  className=\"btn\"\r\n                >\r\n                  Dijkstra\r\n                </button>\r\n                <button onClick={() => this.visualize(\"astar\")} className=\"btn\">\r\n                  A*\r\n                </button>\r\n                <button onClick={() => this.visualize(\"bfs\")} className=\"btn\">\r\n                  BFS\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"instruction\">\r\n              <ul>\r\n                <li>\r\n                  <div class=\"node-start\"></div>Start Node\r\n                </li>\r\n                <li>\r\n                  <div class=\"node-finish\"></div>Target Node\r\n                </li>\r\n                <li>\r\n                  <div class=\"unvisited\"></div>Unvisited Node\r\n                </li>\r\n                <li>\r\n                  <div class=\"node-visited\"></div>Visited Nodes\r\n                </li>\r\n                <li>\r\n                  <div class=\"node-shortest-path\"></div>Shortest-path Node\r\n                </li>\r\n                <li>\r\n                  <div class=\"node-wall\"></div>Wall Node\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <p>Drag the mouse to add wall blocks!</p>\r\n          </div>\r\n        </header>\r\n\r\n        <table className=\"grid\">\r\n          <tbody className=\"grid-body\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr className=\"board-row\" key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const { row, col, isFinish, isStart, isWall } = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        row={row}\r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst GetInitialGrid = () => {\r\n  const grid = [];\r\n  console.log(maxRow + \" \" + maxCol);\r\n  for (let row = 0; row < maxRow; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < maxCol; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    hDistance: Infinity,\r\n    gDistance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\n// import \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App body-style\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}